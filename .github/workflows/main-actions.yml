name: Release Main

on:
  pull_request:
    branches:
      - main
    types: [closed] # Quando a PR for concluida

jobs:
  release:
    # --- Somente se a PR for mergeada ---
    if: github.event.pull_request.merged == true 
    runs-on: ubuntu-latest

    steps:
      # --- Checkout do repositório ---
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # --- Configuração Node.js ---
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # --- Instala dependências ---
      - name: Instalar dependências
        run: npm ci

      # --- Build do projeto ---
      - name: Build
        run: npm run build

      # --- Testes automatizados ---
      - name: Testes
        run: npm test -- --coverage

      # --- Instala semver ---
      - name: Instalar semver
        run: npm install -g semver

      # --- Calcular nova versão com base nos commits ---
      - name: Calcular nova versão
        id: version
        run: |
          set -euo pipefail
          git fetch --tags --force --prune

          # Última tag
          LAST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || echo "v0.0.0")
          echo "Última tag: $LAST_TAG"

          CURRENT_VERSION="${LAST_TAG#v}"
          LOG_RANGE="${LAST_TAG}..HEAD"

          # Coleta commits desde última tag
          mapfile -t COMMITS < <(git log ${LOG_RANGE} --pretty=format:'%s' || true)
          echo "Commits desde ${LAST_TAG}:"
          printf ' - %s\n' "${COMMITS[@]:-<nenhum>}"

          # Detecta bump
          MAJOR=0; MINOR=0; PATCH=0
          for COMMIT in "${COMMITS[@]:-}"; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT" =~ ^feat!\: ]] || [[ "$COMMIT" =~ \!$ ]]; then
              MAJOR=1
            elif [[ "$COMMIT" =~ ^feat(\(.+\))?\: ]]; then
              MINOR=1
            elif [[ "$COMMIT" =~ ^fix(\(.+\))?\: ]]; then
              PATCH=1
            fi
          done

          NEW_VERSION="$CURRENT_VERSION"
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major "$CURRENT_VERSION")
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor "$CURRENT_VERSION")
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch "$CURRENT_VERSION")
          fi

          echo "Versão final: $CURRENT_VERSION -> $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # --- Atualizar package.json ---
      - name: Atualizar versão no package.json
        run: npm version $NEW_VERSION --no-git-tag-version

      # --- Commit e tag da release ---
      - name: Criar commit e tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore(release): v$NEW_VERSION" || echo "Sem alterações para commitar"
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      # --- Criar Release no GitHub ---
      - name: Criar Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "Release v${{ steps.version.outputs.new_version }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}